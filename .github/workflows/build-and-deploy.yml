name: Build and Deploy to GCR

on:
  push:
    branches:
      - master

env:
  # Common
  PROJECT_ID: ${{ secrets.PROJECT_PRI_NAME }}
  IMAGE_NAME: ${{ secrets.WEB_CONTAINER_IMAGE }}
  REPO_NAME: ${{ secrets.ARTIFACT_REGISTORY_WEB_APP }}
  LOCATION: ${{ secrets.GCP_LOCATION }}
  GCE_INSTANCE: ${{ secrets.GCE_INSTANCE }}
  GCE_PROJECTS: ${{ secrets.GCE_PROJECTS }}
  GCE_USER: ${{ secrets.GCE_USER }}
  GCE_ZONE: ${{ secrets.GCE_ZONE }}

  # .env
  NEXT_PUBLIC_GET_INTRO_JSON_PROD: ${{ secrets.NEXT_PUBLIC_GET_INTRO_JSON_PROD }}
  NEXT_PUBLIC_GET_INTRO_JSON: ${{ secrets.NEXT_PUBLIC_GET_INTRO_JSON }}
  NEXT_PUBLIC_SEND_MAIL_URL_PROD: ${{ secrets.NEXT_PUBLIC_SEND_MAIL_URL_PROD }}
  NEXT_PUBLIC_SEND_MAIL_URL: ${{ secrets.NEXT_PUBLIC_SEND_MAIL_URL }}
  NEXT_PUBLIC_SEND_ERROR_LOG_PROD: ${{ secrets.NEXT_PUBLIC_SEND_ERROR_LOG_PROD }}
  NEXT_PUBLIC_SEND_ERROR_LOG: ${{ secrets.NEXT_PUBLIC_SEND_ERROR_LOG }}
  NEXT_PUBLIC_BUILD_WORD: ${{ secrets.NEXT_PUBLIC_BUILD_WORD }}

  # docker-compose.env
  NGINX_CONTAINER: ${{ secrets.NGINX_CONTAINER }}
  NGINX_PORT_1: ${{ secrets.NGINX_PORT_1 }}
  NGINX_PORT_2: ${{ secrets.NGINX_PORT_2 }}
  WEB_CONTAINER: ${{ secrets.WEB_CONTAINER }}
  WEB_IMAGE: ${{ secrets.WEB_IMAGE }}
  WEB_PORT_1: ${{ secrets.WEB_PORT_1 }}

  # nginx.env
  NGINX_HTTP_PORT: ${{ secrets.NGINX_HTTP_PORT }}
  NGINX_DOMAIN: ${{ secrets.NGINX_DOMAIN }}
  LOCAL_WEB_URL: ${{ secrets.LOCAL_WEB_URL }}
  NGINX_HTTPS_PORT: ${{ secrets.NGINX_HTTPS_PORT }}
  CHAIN_PEM: ${{ secrets.CHAIN_PEM }}
  PRI_PEM: ${{ secrets.PRI_PEM }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Google Cloud Authentication
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Setup environments file
      run: |
        # Create .env
        echo "NEXT_PUBLIC_GET_INTRO_JSON_PROD=${{ env.NEXT_PUBLIC_GET_INTRO_JSON_PROD }}" >> .env
        echo "NEXT_PUBLIC_GET_INTRO_JSON=${{ env.NEXT_PUBLIC_GET_INTRO_JSON }}" >> .env
        echo "NEXT_PUBLIC_SEND_MAIL_URL_PROD=${{ env.NEXT_PUBLIC_SEND_MAIL_URL_PROD }}" >> .env
        echo "NEXT_PUBLIC_SEND_MAIL_URL=${{ env.NEXT_PUBLIC_SEND_MAIL_URL }}" >> .env
        echo "NEXT_PUBLIC_SEND_ERROR_LOG_PROD=${{ env.NEXT_PUBLIC_SEND_ERROR_LOG_PROD }}" >> .env
        echo "NEXT_PUBLIC_SEND_ERROR_LOG=${{ env.NEXT_PUBLIC_SEND_ERROR_LOG }}" >> .env
        echo "NEXT_PUBLIC_BUILD_WORD=${{ env.NEXT_PUBLIC_BUILD_WORD }}" >> .env

    - name: Configure Docker
      run: gcloud auth configure-docker asia-northeast1-docker.pkg.dev

    - name: Remove previous backup
      run: |
        gcloud artifacts docker images delete ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:backup --delete-tags

    - name: Backup latest image
      run: |
        docker pull ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest || true
        docker tag ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:backup
        docker push ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:backup

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: docker/Dockerfile
        push: false
        tags: ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

    - name: Tag and Push Docker image
      run: |
        docker tag ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest
        docker push ${{ env.LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPO_NAME }}/${{ env.IMAGE_NAME }}:latest

    - name: Setup docker-compose environments file
      run: |
        echo "NGINX_CONTAINER=${{ env.NGINX_CONTAINER }}" >> docker-compose.env
        echo "NGINX_PORT_1=${{ env.NGINX_PORT_1 }}" >> docker-compose.env
        echo "NGINX_PORT_2=${{ env.NGINX_PORT_2 }}" >> docker-compose.env
        echo "WEB_CONTAINER=${{ env.WEB_CONTAINER }}" >> docker-compose.env
        echo "WEB_IMAGE=${{ env.WEB_IMAGE }}" >> docker-compose.env
        echo "WEB_PORT_1=${{ env.WEB_PORT_1 }}" >> docker-compose.env
  
    - name: Create Nginx configuration file
      run: |
        # Create nginx.env
        echo "NGINX_HTTP_PORT=${{ env.NGINX_HTTP_PORT }}" >> nginx.env
        echo "NGINX_DOMAIN=${{ env.NGINX_DOMAIN }}" >> nginx.env
        echo "LOCAL_WEB_URL=${{ env.LOCAL_WEB_URL }}" >> nginx.env
        echo "NGINX_HTTPS_PORT=${{ env.NGINX_HTTPS_PORT }}" >> nginx.env
        echo "CHAIN_PEM=${{ env.CHAIN_PEM }}" >> nginx.env
        echo "PRI_PEM=${{ env.PRI_PEM }}" >> nginx.env

        # Create runner projects file
        gcloud compute ssh ${{ env.GCE_INSTANCE }} --zone ${{ env.GCE_ZONE }} -- "mkdir -p /home/runner/projects" || exit 1
        # GCE Deploy
        gcloud compute scp nginx.env ${{ env.GCE_INSTANCE }}:/home/runner/projects/. --zone ${{ env.GCE_ZONE }} || exit 1
        gcloud compute scp ./etc/nginx/conf.d/default_template.conf ${{ env.GCE_INSTANCE }}:/home/runner/projects/. --zone ${{ env.GCE_ZONE }} || exit 1
        # Create default.conf
        gcloud compute ssh ${{ env.GCE_INSTANCE }} --zone ${{ env.GCE_ZONE }} -- -o StrictHostKeyChecking=no "
          ls -l /home/runner/projects
          . /home/runner/projects/nginx.env
          export NGINX_HTTP_PORT=\${NGINX_HTTP_PORT}
          export NGINX_DOMAIN=\${NGINX_DOMAIN}
          export LOCAL_WEB_URL=\${LOCAL_WEB_URL}
          export NGINX_HTTPS_PORT=\${NGINX_HTTPS_PORT}
          export CHAIN_PEM=\${CHAIN_PEM}
          export PRI_PEM=\${PRI_PEM}
          cd /home/runner/projects
          touch default.conf
          sudo chmod 666 default.conf
          envsubst  < default_template.conf > default.conf
          sed -i -e 's/URI_VALUE/\$uri/g' default.conf
          sed -i -e 's/HOST_VALUE/\$host/g' default.conf
          sed -i -e 's/REMOTE_ADDR_VALUE/\$remote_addr/g' default.conf
          sed -i -e 's/PROXY_X_FORWARDED_FOR/\$proxy_add_x_forwarded_for/g' default.conf
          sed -i -e 's/SCHEME_VALUE/\$scheme/g' default.conf
          " || exit 1
        # GCE Copy
        gcloud compute ssh ${{ env.GCE_INSTANCE }} --zone ${{ env.GCE_ZONE }} -- -o StrictHostKeyChecking=no "
          sudo chown ${{ env.GCE_USER }}:${{ env.GCE_USER }} /home/runner/projects/default.conf
          mkdir -p ${{ env.GCE_PROJECTS }}/etc/nginx/conf.d
          sudo cp -fp /home/runner/projects/default.conf ${{ env.GCE_PROJECTS }}/etc/nginx/conf.d/default.conf" || exit 1

    - name: Deploy files to GCE
      run: |
        # GCE Deploy
        gcloud compute scp docker-compose.env ${{ env.GCE_INSTANCE }}:/home/runner/projects/. --zone ${{ env.GCE_ZONE }} || exit 1
        gcloud compute scp ./docker/docker-compose.yml ${{ env.GCE_INSTANCE }}:/home/runner/projects/. --zone ${{ env.GCE_ZONE }} || exit 1
        # GCE Copy
        gcloud compute ssh ${{ env.GCE_INSTANCE }} --zone ${{ env.GCE_ZONE }} -- -o StrictHostKeyChecking=no "
          cd /home/runner/projects
          ls -l
          sudo chown ${{ env.GCE_USER }}:${{ env.GCE_USER }} docker-compose.*
          sudo cp -fp docker-compose.* ${{ env.GCE_PROJECTS }}/.
          ls -l ${{ env.GCE_PROJECTS }}
          rm -f /home/runner/projects/*" || exit 1
    
    - name: Update Docker Compose
      run: |
        gcloud compute ssh ${{ env.GCE_INSTANCE }} --zone ${{ env.GCE_ZONE }} -- -o StrictHostKeyChecking=no "
          cd ${{ env.GCE_PROJECTS }}
          sudo -u ${{ env.GCE_USER }} docker-compose --env-file docker-compose.env pull web
          sudo -u ${{ env.GCE_USER }} docker-compose --env-file docker-compose.env up -d web
        " || exit 1