substitutions:
  _PROJECT_ID: ${PROJECT_ID}
  _IMAGE_NAME: ${IMAGE_NAME}
  _REPO_NAME: ${REPO_NAME}
  _LOCATION: ${LOCATION}

options:
    volumes:
    - name: 'ssh'
      path: '/root/.ssh'

steps:
# ステップ 1: SSHキーとknown_hostsファイルをセットアップ
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    gcloud secrets versions access latest --secret=secret-name > /root/.ssh/id_github
    chmod 600 /root/.ssh/id_github
    ssh-keyscan -t rsa github.com >> /root/.ssh/known_hosts

# ステップ 2: GitHubからclone
- name: 'gcr.io/cloud-builders/git'
  args:
  - '-c'
  - 'core.sshCommand=ssh -i /root/.ssh/id_github -o UserKnownHostsFile=/root/.ssh/known_hosts'
  - 'clone'
  - 'git@github.com:kojikawazu/next-ts-intro-web-app.git'

# ステップ 3: Docker を設定
- name: 'gcr.io/cloud-builders/docker'
  args: ['login', 'asia-northeast1-docker.pkg.dev']

# ステップ 4: 環境変数の設定
- name: 'gcr.io/cloud-builders/gcloud'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    set -e
    cd next-ts-intro-web-app
    gcloud secrets versions access latest --secret=node-env > temp.txt
    echo "NODE_ENV=$(cat temp.txt)" > .env
    gcloud secrets versions access latest --secret=app-env > temp.txt
    echo "APP_ENV=$(cat temp.txt)" >> .env
    gcloud secrets versions access latest --secret=next-public-get-intro-json-prod > temp.txt
    echo "NEXT_PUBLIC_GET_INTRO_JSON_PROD=$(cat temp.txt)" >> .env
    gcloud secrets versions access latest --secret=next-public-get-intro-json > temp.txt
    echo "NEXT_PUBLIC_GET_INTRO_JSON=$(cat temp.txt)" >> .env
    gcloud secrets versions access latest --secret=next-public-send-mail-url-prod > temp.txt
    echo "NEXT_PUBLIC_SEND_MAIL_URL_PROD=$(cat temp.txt)" >> .env
    gcloud secrets versions access latest --secret=next-public-send-mail-url > temp.txt
    echo "NEXT_PUBLIC_SEND_MAIL_URL=$(cat temp.txt)" >> .env
    gcloud secrets versions access latest --secret=next-public-send-error-log-prod > temp.txt
    echo "NEXT_PUBLIC_SEND_ERROR_LOG_PROD=$(cat temp.txt)" >> .env
    gcloud secrets versions access latest --secret=next-public-send-error-log > temp.txt
    echo "NEXT_PUBLIC_SEND_ERROR_LOG=$(cat temp.txt)" >> .env
    rm temp.txt

- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    echo "Location: ${_LOCATION}"
    echo "Project ID: ${_PROJECT_ID}"
    echo "Repo Name: ${_REPO_NAME}"
    echo "Image Name: ${_IMAGE_NAME}"
    docker pull ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:latest || true
    if [ $? -eq 0 ]; then
      docker tag ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:latest ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:backup
      docker push ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:backup
    fi

# ステップ 5: 最新のイメージをバックアップ
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    docker pull ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:latest || true
    if [ $? -eq 0 ]; then
      docker tag ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:latest ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:backup
      docker push ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}:backup
    fi

# ステップ 6: Docker イメージをビルドしてプッシュ
- name: 'gcr.io/cloud-builders/docker'
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    docker build -t ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME} ./next-ts-intro-web-app,
    docker push ${_LOCATION}-docker.pkg.dev/${_PROJECT_ID}/${_REPO_NAME}/${_IMAGE_NAME}
